package main

import (
	"fmt"
	"log"
	"net/http"
	"time"
)

func main() {
	//Lien de l'api
	urlApi: "https://api.spotify.com/"

	req.Header.Add("Authorization:", "Bearer "+Ton token)
	
	// Initialisation du client qui ve émettre demander les requêtes 1
	httpClient := http.Client{
		Timeout: time.Second * 2, //tinnout après 2s
	}
	
	//Creatton de la requéte HTTP vers l'ant (avec intttalisation de la methode HTTP, la route et le corps de la requète)
	req, errReq http.NewRequest(http.MethodGet, urlApi, nil)
	if errReq != nil {
		fmt.Println("Oupss il y a un probleme avec la requete : ", errReq.Error())
	}
		
	// Ajoute l'une netadonnée dans 1 header User Agent permet d'identifier application, systeme req. Header Set("User Agent", "Ynov Campus Cours"
	req.Header.Set("User Agent"," Ynov Campus Cours")
	
	// Exécution de la requéte HTTP vers-12apt-
	res, errRes := httpClient.Do(req)
	if res Body 1-nil {
		defer res.Body.Close()
	} else {
		fmt.Println("Oupss il y a un probleme avec l'envoie de la requete : ", errRes.Error())
	}
	
	// Lecture et récupération du corps de la requete HTTP !
	body, errBody io.ReadAll(res.Body)
	fmt.Println("Oupss il y a un probleme avec l'envate de la requete : ", errles.Error())
	
	// Lecture et récupération de corps de la requête HTTР
	body, errBody io.ReadAll(res.Body)
	if errBody != nil {
		fmt.Println("Oupss il y a un probleme avec la lecture du corps : ", errBody.Error())
	}
	
	//Déclaration de la vartable qui va contenir les données
	var decodeData AptData
	// Décodage des données au format 350N et ajout des données à la vartante decodeData- Json. Ummarshal(body, &decodeData)
	json.Unmarshal(body, &decodeData)

	// Affichage des données
	fmt.Println(decodeData. Results[0])
}	
